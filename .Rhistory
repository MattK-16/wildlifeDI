geom_boxplot()
ggplot(aes(y =dur/60, x = loc2_tod,fill=loc2_tod), data = sub) +
scale_y_continuous(trans='log10') +
geom_boxplot()
ggplot(aes(y =dur/60, x = loc_tod,fill=loc2), data = sub) +
scale_y_continuous(trans='log10') +
geom_boxplot()+
labs(fill = '', x='',y = 'Duration (min)')
ggplot(sub, aes(x=dist/1000, fill=tod_c)) +
scale_x_continuous(trans='log10') +
geom_histogram() +
#annotation_logticks(sides="b") +
labs(fill = 'Time of Day', x = 'Distance (km)')
#1. Histogram of trip distances by time of day.
sub= subset(superDF,dist < 200000)  #limit distance to 200km to cut off outliers
ggplot(sub, aes(x=dist/1000, fill=tod_c)) +
scale_x_continuous(trans='log10') +
geom_histogram() +
#annotation_logticks(sides="b") +
labs(fill = 'Time of Day', x = 'Distance (km)')
library(gridExtra)
ggarranges(p1,p2,p3,p4,ncol=2,nrow=2)
labs(fill = 'Time of Day', x = 'Distance (km)')
?ggarrange
library(gridExtra)
install.packages(ggpubr)
install.packages('ggpubr')
library(ggpubr)
sub= subset(superDF,dist < 200000)  #5hrs maximum
p1 = ggplot(sub, aes(x=dist/1000, fill=tod_c)) +
scale_x_continuous(trans='log10') +
geom_histogram() +
#annotation_logticks(sides="b") +
labs(fill = 'Time of Day', x = 'Distance (km)')
p2 = ggplot(aes(y =dist/1000, x =tod_c), data = sub) +
scale_y_continuous(trans='log10') +
geom_boxplot()+
labs(fill = '', x='',y = 'Disatance (km)')
p3 = ggplot(aes(y =dist/1000, x =tod_c,fill=loc2), data = sub) +
scale_y_continuous(trans='log10') +
geom_boxplot()+
labs(fill = '', x='',y = 'Disatance (km)')
p4 = ggplot(aes(y =dist/1000, x =tod_c,fill=Group), data = sub) +
scale_y_continuous(trans='log10') +
geom_boxplot()+
labs(fill = '', x='',y = 'Distance (km)')
ggarrange(p1,p2,p3,p4,ncol=2,nrow=2)
ggplot(aes(y = medtripdist, x = Group,fill=gender), data = pro2) +
scale_y_continuous(trans='log10') +
geom_boxplot()
?agg\
?aggregate
nt = aggregate(sub,by=tod_c,FUN=sum)
head(sub)
nt = table(tod_c,tod_loc_2,FUN=sum)
?table
nt = table(sub$tod_c,sub$loc_2)
nt = table(sub$tod_c,sub$loc2)
nt
t1 = table(sub$tod_c,sub$loc2)
t2 = table(sub$tod_c,sub$Group)
t3 = table(sub$tod_c,sub$gender)
t3
t2 = table(sub$tod_c,sub$Group)
t2
tt = table(sub$Group)
tt
table(sub$gender)
table(pro2$gender)
?geom_barplot
?geom_bar
t1 = data.frame(table(sub$tod_c,sub$loc2))
t1
t1 = data.frame(table(sub$tod_c,sub$loc2))
q1 = ggplot(t1, aes(x=Var1, y=Freq, fill=Var2)) +
geom_bar() +
labs(fill = '', y = 'Number of Trips',x = 'Time of Day')
q1
q1 = ggplot(sub, aes(x=tod_c fill=loc2)) +
q1 = ggplot(sub, aes(x=tod_c, fill=loc2)) +
geom_bar() +
labs(fill = '', y = 'Number of Trips',x = 'Time of Day')
q1
q2 = ggplot(sub, aes(x=tod_c, fill=Group)) +
geom_bar() +
labs(fill = '', y = 'Number of Trips',x = 'Time of Day')
q2 = ggplot(sub, aes(x=tod_c, fill=Group)) +
geom_bar() +
labs(fill = '', y = 'Number of Trips',x = 'Time of Day')
q2
q2 = ggplot(sub, aes(x=tod_c, fill=gender)) +
geom_bar() +
labs(fill = '', y = 'Number of Trips',x = 'Time of Day')
q2
head(pro2)
q1 = ggplot(sub, aes(x=tod_c, fill=Group)) +
geom_bar() +
labs(fill = '', y = 'Number of Trips',x = 'Time of Day')
q2 = ggplot(sub, aes(x=tod_c, fill=gender)) +
geom_bar() +
labs(fill = '', y = 'Number of Trips',x = 'Time of Day')
q4 = ggplot(aes(y = ntrips, x = Group, fill=gender), data = pro2) +
ylim(0,75)+
geom_boxplot()+
labs(fill = '', y = 'Number of Trips',x = '')
q3 = ggplot(aes(y = ntrips, x = loc2, fill=gender), data = pro2) +
ylim(0,75)+
geom_boxplot()+
labs(fill = '', y = 'Number of Trips',x = '')
ggarrange(q1,q2,q3,q4,ncol=2,nrow=2)
?aggregate
?table
t1 = table(sub$toc_c,sub$Group)
t1 = table(sub$tod_c,sub$Group)
t1
t1 = data.frame(table(sub$tod_c,sub$Group))
t1
# Master staypoint file from Nick
stp = read.csv('D:/WorkAndHome/GPS/Data/master_file.csv',stringsAsFactors = FALSE)
dim(stp)
head(stp)
jj = subset(stp,Staypoint.Was.Fully.Answered.by.User == 1)
jj = subset(stp,Staypoint.was.Fully.Answered.by.User == 1)
dim(jj)
dim(stp)
install.packages(c("pagedown", "xaringan"))
# make sure you have pagedown >= 0.2 and xaringan >= 0.9; if not, run
# remotes::install_github(c('rstudio/pagedown', 'yihui/xaringan'))
pagedown::chrome_print("path/to/your/slides.Rmd")
pagedown::chrome_print('C:/Users/jlong83/Documents/Conferences/AAG-2019/pres/AAG_Prez.Rmd')
library(mapview)
mapview(breweries)
library(sf)
st_read('C:/WorkSpace/London_DA.shp')
lda = st_read('C:/WorkSpace/London_DA.shp')
head(lda)
mapview(st_geometry(lda))
mapview(lda['COL7'])
plot(lda['COL7'])
#==========================
# MockHunt_Figures.R
#==========================
### Contact analysis testing
# devtools::load_all('D:/RPackages/wildlifeDI/wildlifeDI/')
devtools::install_github('jedalong/wildlifeDI')
library(wildlifeDI)
library(adehabitatLT)
library(ggplot2)
library(cowplot)
#data(does)
load('D:/RPackages/wildlifeDI/does.rdata')
doecons <- conProcess(does,dc=50,tc=15*60)
doephas <- conPhase(doecons, pc=60*60)
doepair <- conPairs(doephas)
doetemp <- conTemporal(doephas,units='mins')
doepair$hod <- as.POSIXlt(doepair$date)$hour + as.POSIXlt(doepair$date)$min / 60  #convert POSIX to hours
doetemp$hod <- as.POSIXlt(doetemp$start_time)$hour + as.POSIXlt(doetemp$start_time)$min / 60  #convert POSIX to hours
#data(mockhunt)
load('D:/RPackages/wildlifeDI/mockhunt.rdata')
head(mockhunt)
?POSIXlt
#Figure 2
#----------------
png('D:/Mobility/Noble_Deer/HuntDeer/Results/Figure2.png',height=7,width=7,units='in',res=300)
par(mfcol=c(4,1),mar=c(4,4,1,0))
hist(doepair$dom,breaks=0:30, main='',xlab='Day of Month',xlim=c(0,25))            #Figure 2a
mtext('a)',1,line=3,adj=0)
hist(doepair$hod,breaks=0:24, main='',xlab='Hour of Day',xlim=c(0,25))             #Figure 2a
mtext('a)',1,line=3,adj=0)
hist(doetemp$hod,breaks=0:24,main='',,xlab='Hour of Day',xlim=c(0,25))             #Figure 2b
mtext('b)',1,line=3,adj=0)
hist(as.numeric(doetemp$duration),main='',xlab='Duration (hrs)')                   #figure 2c
mtext('c)',1,line=3,adj=0)
dev.off()
#----
doepair$dom <- as.POSIXlt(doepair$date)$mday
#Figure 2
#----------------
png('D:/Mobility/Noble_Deer/HuntDeer/Results/Figure2.png',height=7,width=7,units='in',res=300)
par(mfcol=c(4,1),mar=c(4,4,1,0))
hist(doepair$dom,breaks=0:30, main='',xlab='Day of Month',xlim=c(0,25))            #Figure 2a
mtext('a)',1,line=3,adj=0)
hist(doepair$hod,breaks=0:24, main='',xlab='Hour of Day',xlim=c(0,25))             #Figure 2a
mtext('a)',1,line=3,adj=0)
hist(doetemp$hod,breaks=0:24,main='',,xlab='Hour of Day',xlim=c(0,25))             #Figure 2b
mtext('b)',1,line=3,adj=0)
hist(as.numeric(doetemp$duration),main='',xlab='Duration (hrs)')                   #figure 2c
mtext('c)',1,line=3,adj=0)
dev.off()
#----------------
png('D:/Mobility/Noble_Deer/HuntDeer/Results/Figure2.png',height=7,width=7,units='in',res=300)
par(mfcol=c(4,1),mar=c(4,4,1,0))
hist(doepair$dom,breaks=0:30, main='',xlab='Day of Month',xlim=c(0,30))            #Figure 2a
mtext('a)',1,line=3,adj=0)
hist(doepair$hod,breaks=0:24, main='',xlab='Hour of Day',xlim=c(0,25))             #Figure 2a
mtext('a)',1,line=3,adj=0)
hist(doetemp$hod,breaks=0:24,main='',,xlab='Hour of Day',xlim=c(0,25))             #Figure 2b
mtext('b)',1,line=3,adj=0)
hist(as.numeric(doetemp$duration),main='',xlab='Duration (hrs)')                   #figure 2c
mtext('c)',1,line=3,adj=0)
dev.off()
#----
#----------------
png('D:/Mobility/Noble_Deer/HuntDeer/Results/Figure3.png',height=4,width=8,units='in',res=300)
par(mfcol=c(1,3),mar=c(2,1,1,0))
spall <- ltraj2spdf(does)                         # Turn all fixes into spatial points
sp1 <- conSpatial(doephas,type='p')               # Get points of all contacts
sp2 <- conSpatial(doephas,type='p',def='first')   # Get points of first fix of contact phase
sp3 <- conSpatial(doephas,type='l')               # Get contact phases as lines
# panel a
plot(spall,col='grey',pch=20,cex=0.3)
plot(sp1,add=T,pch=1,cex=0.5)
mtext('a)',1,line=1,adj=0)
box()
# panel b
plot(spall,col='grey',pch=20,cex=0.3)
plot(sp1,add=T,pch=1,cex=0.5)
plot(sp2,add=T,col='red',pch=20,cex=0.5)
mtext('b)',1,line=1,adj=0)
box()
# panel c
plot(spall,col='grey',pch=20,cex=0.3)
plot(sp1,add=T,pch=1,cex=0.5)
plot(sp3,add=T,col='red')
mtext('c)',1,line=1,adj=0)
box()
dev.off()
#----
#Figure 3
#----------------
png('D:/Mobility/Noble_Deer/HuntDeer/Results/Figure3.png',height=3,width=8,units='in',res=300)
par(mfcol=c(1,3),mar=c(2,1,1,0))
spall <- ltraj2spdf(does)                         # Turn all fixes into spatial points
sp1 <- conSpatial(doephas,type='p')               # Get points of all contacts
sp2 <- conSpatial(doephas,type='p',def='first')   # Get points of first fix of contact phase
sp3 <- conSpatial(doephas,type='l')               # Get contact phases as lines
# panel a
plot(spall,col='grey',pch=20,cex=0.3)
plot(sp1,add=T,pch=1,cex=0.5)
mtext('a)',1,line=1,adj=0)
box()
# panel b
plot(spall,col='grey',pch=20,cex=0.3)
plot(sp1,add=T,pch=1,cex=0.5)
plot(sp2,add=T,col='red',pch=20,cex=0.5)
mtext('b)',1,line=1,adj=0)
box()
# panel c
plot(spall,col='grey',pch=20,cex=0.3)
plot(sp1,add=T,pch=1,cex=0.5)
plot(sp3,add=T,col='red')
mtext('c)',1,line=1,adj=0)
box()
dev.off()
#----
library(ggplot2)
library(dplyr)
load('D:/WorkAndHome/GPS/Data/ProcessedGPS/superDF.RData')
pro <- read.csv('D:/WorkAndHome/GPS/Data/WorkAndHome_Profiles.csv',stringsAsFactors = TRUE)
names(pro)[1] = 'User.ID'
dim(superDF)
head(superDF)
length(unique(superDF$User.ID))
# Preliminary Figures for AAG
library(ggplot2)
library(dplyr)
load('D:/WorkAndHome/GPS/Data/ProcessedGPS/superDF.RData')
pro <- read.csv('D:/WorkAndHome/GPS/Data/WorkAndHome_Profiles.csv',stringsAsFactors = TRUE)
names(pro)[1] = 'User.ID'
#simplify the location variable
pro$loc2 = pro$location
levels(pro$loc2) = c('work','home','home','work')
# create a time of day variable in minutes 0 to 1440
superDF$tod = superDF$start.time$hour*60 + superDF$start.time$min
superDF$tod_c = cut(superDF$tod, breaks=c(0,360,630,960,1140,1441),labels=FALSE,include.lowest=TRUE)
superDF$tod_c[superDF$tod_c == 5] = 1
superDF$tod_c = factor(superDF$tod_c,labels=c('Night','AMcom','Day','PMcom'))
superDF$tod_c = factor(superDF$tod_c,levels=c('AMcom','Day','PMcom','Night'))  #reorder
# Create a weekday/weekend variables
superDF$wdwe = factor(superDF$start.time$wday,labels=c('weekend','weekday','weekday','weekday','weekday','weekday','weekend'))
#Add particpant info to trip dataset
superDF = merge(superDF,pro,by='User.ID',all.x=TRUE,all.y=FALSE)
#Remove non-particpants (testers)
superDF = superDF[!is.na(superDF$Group),]
#rename employment variable
levels(superDF$employment.group) = c('Owner','Employee','Freelance')
summary(superDF)
?aggregate
aggregate(superDF,superDF$Group,superDF$gender)
?table
table(superDF,superDF$Group,superDF$gender)
table(superDF$Group,superDF$gender)
pro2 = pro[pro$User.ID %in% superDF$User.ID,]
head(pro2)
table(pro2$Group,pro2$gender)
#==========================
# MockHunt_Figures.R
#==========================
### Contact analysis testing
# devtools::load_all('D:/RPackages/wildlifeDI/wildlifeDI/')
devtools::install_github('jedalong/wildlifeDI')
library(wildlifeDI)
library(adehabitatLT)
library(ggplot2)
library(cowplot)
#data(does)
load('D:/RPackages/wildlifeDI/does.rdata')
doecons <- conProcess(does,dc=50,tc=15*60)
doephas <- conPhase(doecons, pc=60*60)
doepair <- conPairs(doephas)
doetemp <- conTemporal(doephas,units='mins')
doepair$hod <- as.POSIXlt(doepair$date)$hour + as.POSIXlt(doepair$date)$min / 60  #convert POSIX to hours
doetemp$hod <- as.POSIXlt(doetemp$start_time)$hour + as.POSIXlt(doetemp$start_time)$min / 60  #convert POSIX to hours
doepair$dom <- as.POSIXlt(doepair$date)$mday
#data(mockhunt)
load('D:/RPackages/wildlifeDI/mockhunt.rdata')
head(mockhunt)
#Figure 2
#----------------
png('D:/Mobility/Noble_Deer/HuntDeer/Results/Figure2.png',height=7,width=7,units='in',res=300)
par(mfcol=c(4,1),mar=c(4,4,1,0))
hist(doepair$dom,breaks=0:30, main='',xlab='Day of Month',xlim=c(0,30))            #Figure 2a
mtext('a)',1,line=3,adj=0)
hist(doepair$hod,breaks=0:24, main='',xlab='Hour of Day',xlim=c(0,25))             #Figure 2b
mtext('b)',1,line=3,adj=0)
hist(doetemp$hod,breaks=0:24,main='',,xlab='Hour of Day',xlim=c(0,25))             #Figure 2c
mtext('c)',1,line=3,adj=0)
hist(as.numeric(doetemp$duration),main='',xlab='Duration (hrs)')                   #figure 2d
mtext('d)',1,line=3,adj=0)
dev.off()
#----
setwd('D:/RPackages/wildlifeDI/wildlifeDI/')
devtools::use_travis()
usethis::use_travis()
?usethis::use_travis
rm(list=ls())
library(devtools)
library(knitr)
#Builds,Checks,and Installs on local machine. Also produces documentation.
#### Apparently you can ignore the qpdf Errors (seem to be from vignettes)...
ProcessPackage <- function(pckg,version=0.1,wd='D:/RPackages/',install=TRUE,doc_only=FALSE,cran=FALSE){
wd <- paste(wd,pckg,'/',sep='')
#=========================
#Keep reloading this during devleopment.
#Use 'load_all' in development to reset the working environment in R
setwd(wd)
load_all(pckg)
#-----------------------
#use 'document' to re-fresh package documentation, useful when fixing typos etc.
document(pckg)
#check_doc(pckg)
#To create the package documentation PDF
docfile <- paste(pckg,'_',version,'-documentation.pdf',sep='')
if (file.exists(paste(wd,docfile,sep=''))){
file.remove(paste(wd,docfile,sep=''))
}
a1 <- paste('R CMD Rd2pdf --title=',pckg,' --output=',docfile,' ',wd,pckg,'/',sep='')
system(a1)
#Show the package news
show_news(pckg)
#If only doing the documentation stop the process.
if (doc_only){ return('Documentation processed.') }
#test any test-files in the inst/tests/ directory --- to be explored...
#test(pckg)
#----- building and checking for CRAN --------------------------
a2 <- paste('R CMD build',pckg)
system(a2)
if (cran){
a4 <- paste('R CMD check --as-cran ',pckg,'_',version,'.tar.gz',sep='')
system(a4)
} else {
a3 <- paste('R CMD check ',pckg,'_',version,'.tar.gz',sep='')
system(a3)
}
#----------------------------------------------------------------
#install on local machine
if (install==TRUE){
a5 <- paste(wd,pckg,'_',version,'.tar.gz',sep='')
install.packages(a5,repos=NULL,type='source')
}
print(paste('Finished processing',pckg))
}
#Run this repeatedly!
ProcessPackage('wildlifeDI',version=0.3,install=F,doc_only=F,cran=T)
#Run this repeatedly!
ProcessPackage('wildlifeDI',version=0.3,install=F,doc_only=F,cran=F)
#Run this repeatedly!
ProcessPackage('wildlifeDI',version=0.3,install=F,doc_only=F,cran=F)
#Run this repeatedly!
ProcessPackage('wildlifeDI',version=0.3,install=F,doc_only=F,cran=F)
#Builds,Checks,and Installs on local machine. Also produces documentation.
#### Apparently you can ignore the qpdf Errors (seem to be from vignettes)...
ProcessPackage <- function(pckg,version=0.1,wd='D:/RPackages/',install=TRUE,doc_only=FALSE,cran=FALSE){
wd <- paste(wd,pckg,'/',sep='')
#=========================
#Keep reloading this during devleopment.
#Use 'load_all' in development to reset the working environment in R
setwd(wd)
load_all(pckg)
#-----------------------
#use 'document' to re-fresh package documentation, useful when fixing typos etc.
document(pckg)
#check_doc(pckg)
#To create the package documentation PDF
docfile <- paste(pckg,'_',version,'-documentation.pdf',sep='')
if (file.exists(paste(wd,docfile,sep=''))){
file.remove(paste(wd,docfile,sep=''))
}
a1 <- paste('R CMD Rd2pdf --title=',pckg,' --output=',docfile,' ',wd,pckg,'/',sep='')
system(a1)
#Show the package news
show_news(pckg)
#If only doing the documentation stop the process.
if (doc_only){ return('Documentation processed.') }
#test any test-files in the inst/tests/ directory --- to be explored...
#test(pckg)
#----- building and checking for CRAN --------------------------
a2 <- paste('R CMD build',pckg)
system(a2)
if (cran){
a4 <- paste('R CMD check --as-cran ',pckg,'_',version,'.tar.gz',sep='')
system(a4)
} else {
a3 <- paste('R CMD check ',pckg,'_',version,'.tar.gz',sep='')
system(a3)
}
#----------------------------------------------------------------
#install on local machine
if (install==TRUE){
a5 <- paste(wd,pckg,'_',version,'.tar.gz',sep='')
install.packages(a5,repos=NULL,type='source')
}
print(paste('Finished processing',pckg))
}
#Run this repeatedly!
ProcessPackage('wildlifeDI',version=0.3,install=F,doc_only=F,cran=F)
#Run this repeatedly!
ProcessPackage('wildlifeDI',version=0.3,install=F,doc_only=F,cran=F)
#Run this repeatedly!
ProcessPackage('wildlifeDI',version=0.3,install=F,doc_only=F,cran=T)
?devtools::build_win
devtools::build_win()
setwd('D:/RPackages/wildlifeDI/wildlifeDI/')
devtools::build_win()
?devtools::check_win_devel
devtools::check_win_devel()
#Run this repeatedly!
ProcessPackage('wildlifeDI',version=0.3,install=F,doc_only=F,cran=T)
getwd()
setwd('D:/RPackages/wildlifeDI/wildlifeDI/')
#test on win-builder develpment version
devtools::check_win_devel()
install.packages('adehabitatLT')
install.packages("adehabitatLT")
rm(list=ls())
library(devtools)
library(knitr)
#Builds,Checks,and Installs on local machine. Also produces documentation.
#### Apparently you can ignore the qpdf Errors (seem to be from vignettes)...
ProcessPackage <- function(pckg,version=0.1,wd='D:/RPackages/',install=TRUE,doc_only=FALSE,cran=FALSE){
wd <- paste(wd,pckg,'/',sep='')
#=========================
#Keep reloading this during devleopment.
#Use 'load_all' in development to reset the working environment in R
setwd(wd)
load_all(pckg)
#-----------------------
#use 'document' to re-fresh package documentation, useful when fixing typos etc.
document(pckg)
#check_doc(pckg)
#To create the package documentation PDF
docfile <- paste(pckg,'_',version,'-documentation.pdf',sep='')
if (file.exists(paste(wd,docfile,sep=''))){
file.remove(paste(wd,docfile,sep=''))
}
a1 <- paste('R CMD Rd2pdf --title=',pckg,' --output=',docfile,' ',wd,pckg,'/',sep='')
system(a1)
#Show the package news
show_news(pckg)
#If only doing the documentation stop the process.
if (doc_only){ return('Documentation processed.') }
#test any test-files in the inst/tests/ directory --- to be explored...
#test(pckg)
#----- building and checking for CRAN --------------------------
a2 <- paste('R CMD build',pckg)
system(a2)
if (cran){
a4 <- paste('R CMD check --as-cran ',pckg,'_',version,'.tar.gz',sep='')
system(a4)
} else {
a3 <- paste('R CMD check ',pckg,'_',version,'.tar.gz',sep='')
system(a3)
}
#----------------------------------------------------------------
#install on local machine
if (install==TRUE){
a5 <- paste(wd,pckg,'_',version,'.tar.gz',sep='')
install.packages(a5,repos=NULL,type='source')
}
print(paste('Finished processing',pckg))
}
#Run this repeatedly!
ProcessPackage('wildlifeDI',version=0.3,install=F,doc_only=F,cran=T)
#test on win-builder develpment version
setwd('D:/RPackages/wildlifeDI/wildlifeDI/')
devtools::check_win_devel()
devtools::check_cran()
devtools::check()
#Submission to CRAN
devtools::release()
install.packages('devtools')
install.packages("devtools")
