## 2. Install and load Devtools
install.packages('devtools')
#CREATE README FILE for GITHUB
# Make sure the working directory is in the package
setwd('D:/RPackages/wildilfeDI/')
#CREATE README FILE for GITHUB
# Make sure the working directory is in the package
setwd('D:/RPackages/wildlifeDI/')
# EDIT README FILE TO HEARTS CONTENT
knitr::knit(input="README.rmd", output = "README.md")
#CREATE README FILE for GITHUB
# Make sure the working directory is in the package
setwd('D:/RPackages/wildlifeDI/wildlifeDI/')
# EDIT README FILE TO HEARTS CONTENT
knitr::knit(input="README.rmd", output = "README.md")
#If more files need to be ignored use:
devtools::use_build_ignore("notes")
#If more files need to be ignored use:
#devtools::use_build_ignore("notes")
#CREATE VIGNETTE FILES
# Make sure the working directory is in the package
setwd('D:/RPackages/wildlifeTG/wildlifeTG/')
devtools::use_vignette('wildlifeTG-vignette')
rm(list=ls())
library(devtools)
library(knitr)
#Set up Travis CI for checking on linux automatically through github
usethis::use_github_actions()
setwd('D:/RPackages/wildlifeDI/wildlifeDI/')
#Check Spelling
devtools::spell_check()
#test on Local machine using devtools
devtools::release_checks()
devtools::check()
install.packages(roxygen2)
install.packages('roxygen2')
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(adehabitatLT)
?CRS
install.packages('rgeos')
library(rgeos)
library(adehabitatLT)
install.packages('ggplot2')
devtools::check()
install.packages('igraph')
install.packages('adehabitatHR')
install.packages('ggplot2')
install.packages('GGally')
install.packages('network')
install.packages('knitr')
install.packages("knitr")
install.packages('nlme')
devtools::check()
library(wildlifeDI)
data(deer)
deer
deer37 <- deer[1]
deer37
deer38 <- deer[2]
deer38
checkTO(deer37,deer38)
#convert ltraj to sf points to compute mcp polygon
pts37 <- ltraj2sf(deer37)
pts38 <- ltraj2sf(deer38)
#compute mcp polygons
hr37 <- st_convex_hull(st_union(pts37))
hr38 <- st_convex_hull(st_union(pts38))
#plot
plot(hr38)
plot(hr37,border="red",add=T)
#Compute SI index
st_area(st_intersection(hr37,hr38))/st_area(st_union(hr37,hr38))
deers <- GetSimultaneous(deer37,deer38,tc=7.5*60)
deer37.sim <- deers[1]
deer38.sim <- deers[2]
deer37.sim
deer38.sim
Prox(deer37, deer38, tc=7.5*60, dc=50)
Ca(deer37, deer38, tc=7.5*60, dc=50)
Don(deer37,deer38, tc=7.5*60, dc=50)
Lixn(deer37, deer38, method='spatial', tc=7.5*60,
hr1=hr37, hr2=hr38)
Cs(deer37, deer38, tc=7.5*60)
#compute overlap zone
oz <- st_intersection(hr37, hr38)
HAI(deer37, deer38, oz, tc=7.5*60, dc=50)
IAB(deer37, deer38, dc=50, tc=7.5*60)
#test on Local machine using devtools
devtools::release_checks()
devtools::check()
t1 <- as.POSIXct(strptime('2005-03-09 00:00:00', format= '%Y-%m-%d %H:%M:%S'))
t2 <- as.POSIXct(strptime('2005-03-11 00:00:00', format= '%Y-%m-%d %H:%M:%S'))
twin <- c(t1,t2)
tod <- c('06:00:00', '10:00:00')
class(twin)
class(tod)
inherits(tod)
inherits(tod,'character')
inherits(tod,'twin')
inherits(twin,c('POSIXct','POSIXlt'))
inherits(twin,c('POSIXct'))
!inherits(tod,'character')
tr1
tr2
devtools::check()
devtools::check()
devtools::check()
#Check windows release version
devtools::check_win_release()
#test building on win-builder development version
devtools::check_win_devel()
#Testing building on Rhub (windows server and two Linux versions)
devtools::check_rhub()
aboutR()
version()
devtools::check_rhub(env_vars=c(R_COMPILE_AND_INSTALL_PACKAGES = "always"))
