mtcars$wt_bin[mtcars$wt > 3.5 ] = 1
boxplot(mpg ~ wt_bin, data=mtcars)
mtcars$wt_bin = 0
mtcars$wt_bin[mtcars$wt > 3.5 ] = 1
boxplot(mpg ~ wt_bin, data=mtcars)
mtcars$wt_bin = 0
mtcars$wt_bin[mtcars$wt > 3.3 ] = 1
boxplot(mpg ~ wt_bin, data=mtcars)
t.test(mpg~wt_bin,data=mtcars)
glm(mpg~wt_bin,data=mtcars)
m1 = glm(mpg~wt_bin,data=mtcars)
summary(m1)
t.test(mpg~wt_bin,data=mtcars)
m1 = glm(mpg~wt_bin,data=mtcars)
summary(m1)
?t.test
t.test(mpg~wt_bin,data=mtcars,var.equal=TRUE)
t.test(mpg~wt_bin,data=mtcars,var.equal=TRUE,alternative='greater')
m1 = glm(mpg~wt_bin,data=mtcars)
summary(m1)
t.test(mpg~wt_bin,data=mtcars,var.equal=TRUE)
get confidence intervals in GLM R
m1 = glm(mpg~wt_bin,data=mtcars)
summary(m1)
confint(m1)
?glm
m1 = glm(mpg~wt_bin,data=mtcars,intercept=FALSE)
m1 = glm(mpg~wt_bin,data=mtcars)
summary(m1)
confint(m1)
boxplot(mpg~cyl,data=mtcars)
a = anova(mpg~cyl,data=mtcars)
?anova
m2 = glm(mpg~cyl,data=mtcars)
anova(m2)
a = aov(mpg~cyl,data=mtcars)
summary(a)
a = aov(mpg~cyl,data=mtcars)
summary(a)
a = aov(mpg~cyl,data=mtcars)
summary(a)
m2 = glm(mpg~cyl,data=mtcars)
anova(m2)
m2 = glm(mpg~cyl,data=mtcars)
summary(m2)
a2 = tukeyHSD(a)
a2 = TukeyHSD(a)
a2 = TukeyHSD(a)
mtcars$cyl = factor(mtcars$cyl)
a = aov(mpg~cyl,data=mtcars)
summary(a)
a2 = TukeyHSD(a)
summary(a2)
a2
m2 = glm(mpg~cyl,data=mtcars)
summary(m2)
confint(m2)
?aov
m2 = glm(mpg~cyl,data=mtcars)
summary(m2)
confint(m2)
cor.test(mpg~wt,data=mtcars)
head(mtcars)
?cor.test
?cor.test
cor.test(mtcars$mpg,mtcars$wt)
cor.test(mtcars$mpg,mtcars$wt)
m3 = glm(mpg ~ wt, data=mtcars)
summary(m3)
confint(m3)
m3 = glm(mpg ~ wt, data=mtcars)
summary(m3)
confint(m3)
m3 = glm(mpg ~ wt, data=mtcars)
summary(m3)
confint(m3)
m4 = glm(mpg~wt+cyl,data=mtcars)
summary(m4)
m5 = glm(mpg~wt*cyl,data=mtcars)
summary(m5)
vif(m5)
library(car)
library(car)
vif(m5)
library(car)
vif(m4)
library(car)
vif(m4)
m6 = glm(wt_bin ~ drat+cyl,data=mtcars,family='binomial',link='logit')
?glm
m6 = glm(wt_bin ~ drat+cyl,data=mtcars,family='binomial')
m6 = glm(wt_bin ~ drat+cyl,data=mtcars,family='binomial')
summary(m6)
knitr::opts_chunk$set(echo = TRUE)
exp(m6$coefficients)
exp(m6$coefficients)
knitr::opts_chunk$set(echo = TRUE)
data(mtcars)
head(mtcars)
mtcars$wt_bin = 0
mtcars$wt_bin[mtcars$wt > 3.3 ] = 1  #Heavy is greater than 3.3
boxplot(mpg ~ wt_bin, data=mtcars)
t.test(mpg~wt_bin,data=mtcars,var.equal=TRUE)
m1 = glm(mpg~wt_bin,data=mtcars)
summary(m1)
confint(m1)
boxplot(mpg~cyl,data=mtcars)
mtcars$cyl = factor(mtcars$cyl)
a = aov(mpg~cyl,data=mtcars)
summary(a)
a2 = TukeyHSD(a)
a2
m2 = glm(mpg~cyl,data=mtcars)
summary(m2)
confint(m2)
cor.test(mtcars$mpg,mtcars$wt)
m3 = glm(mpg ~ wt, data=mtcars)
summary(m3)
confint(m3)
m4 = glm(mpg~wt+cyl,data=mtcars)
summary(m4)
m5 = glm(mpg~wt*cyl,data=mtcars)
summary(m5)
library(car)
vif(m4)
m6 = glm(wt_bin ~ drat+cyl,data=mtcars,family='binomial')
summary(m6)
exp(m6$coefficients)
head(mtcars)
m6 = glm(wt_bin ~ disp + am,data=mtcars,family='binomial')
summary(m6)
exp(m6$coefficients)
#REad in the regional flow data for November
library(dplyr)
fl = read.csv('D:/Covid_19/Data/LockdownFlows_TorPeelNov.csv',stringsAsFactors=F)
fl$date = as.Date(fl$date)
fl$jDay = strftime(fl$date,format = "%j",origin="2019-12-31")
#Load in the stats to get the number of people in each region
mob = read.csv('D:/COVID_19/Data/ADA_Mobility_2020_01_11.csv')
mob = subset(mob,jDay == 315)
mob = mob[,c('ADAUID','n_home')]
fl = left_join(fl,mob, by=c('ADAUID' = 'ADAUID'))
fl = subset(fl,!is.na(n_home))
fl$ofpc = fl$outflow/fl$n_home
#compute the mobility flow ratio
fl$f_rat = NA
fl$f_rat_pc = NA
tcrit = 328
trange =  321:334
for (ada in unique(fl$ADAUID)){
for (t in trange){
i = which(fl$ADAUID == ada & fl$jDay == t)
if (t < tcrit){
i7 = which(fl$ADAUID == ada & fl$jDay == t-7)
} else {
i7 = which(fl$ADAUID == ada & fl$jDay == t-14)
}
if (length(i) < 1) next
if (length(i7) < 1) next
fl$f_rat[i] = (fl$outflow[i] - fl$outflow[i7])/(fl$outflow[i]+fl$outflow[i7])
fl$f_rat_pc[i] = (fl$ofpc[i] - fl$ofpc[i7])/(fl$ofpc[i]+fl$ofpc[i7])
}
}
sub2 = subset(fl,!is.na(f_rat))
boxplot(f_rat~jDay,data=sub2)
boxplot(f_rat_pc~jDay,data=sub2)
boxplot(log(ofpc)~jDay,data=sub2)
hist(sub2$ofpc)
boxplot(ofpc~jDay,data=sub2)
# Script to Generate boundary file for Stage2-Stage3 analysis
library(sf)
ada_poly = st_read('D:/Data/Canada/Census/ada_ontario_with_HR.shp')
# Toronto Peel Lockdown only
ids = c(3595,3553)
hr_poly2 = ada_poly[ada_poly$HRUID %in% ids,]
# Dissolve those HRs to single poly
hr_poly3 = hr_poly2 %>%
group_by() %>%
summarise()
#Convert to Lines
hr_mls = st_cast(hr_poly3,'MULTILINESTRING')
#Dissolve province to erase boundary
prov_bord = ada_poly %>%
group_by() %>%
summarise()
prov_buff = st_buffer(prov_bord,-100)
s2_bord = st_intersection(hr_mls,prov_buff)
#Load ADA polygons
ada_cent = st_centroid(ada_poly)
#compute distance from every ada poly to boundary (in km)
ada_cent$dist = as.numeric(st_distance(ada_cent,s2_bord,by_element=TRUE)/1000)
#link distance variable
sub2 = left_join(sub2,ada_cent[,c('jADAUID','dist')],by=c('ADAUID' = 'jADAUID'))
ada_poly2 = left_join(ada_poly,st_drop_geometry(ada_cent[,c('jADAUID','dist')]))
#link socio-economic indicators
da_poly = st_read('D:/data/Canada/census/lda_000a16a_e.shp')
da = st_drop_geometry(da_poly)
da$DAUID = as.numeric(da$DAUID)
imd = read.csv('D:/COVID_19/Data/on_scores_quintiles-eng/on_scores_quintiles_EN.csv')
imd = left_join(imd,da[,c('DAUID','ADAUID')],by=c('PRCDDA'='DAUID'))
imd = imd %>%
group_by(ADAUID) %>%
summarise(
pop = sum(Dissemination.area..DA..Population),
RI = weighted.mean(Residential.instability.Scores,Dissemination.area..DA..Population),
ED = weighted.mean(Economic.dependency.Scores,Dissemination.area..DA..Population),
EC = weighted.mean(Ethno.cultural.composition.Scores,Dissemination.area..DA..Population),
SV = weighted.mean(Situational.vulnerability.Scores,Dissemination.area..DA..Population)
)
imd$ADAUID = as.numeric(imd$ADAUID)
sub2 = left_join(sub2,imd)
x = subset(sub2,jDay == 328)
plot(x$ED, x$f_rat_pc)
plot(x$RI, x$f_rat)
plot(x$EC, x$f_rat)
plot(x$SV, x$f_rat)
plot(sub2$dist,sub2$ofpc)
#ada_poly3 = left_join(ada_poly2,x,by=c('jADAUID.x' = 'ADAUID'))
#plot(ada_poly3['ofpc'])
##GLMM analysis
sub2$period = 0
sub2$period[which(sub2$jDay > 327)] = 1
sub3 = subset(sub2, !is.na(RI) )
sub3 = subset(sub3, !is.infinite(f_rat))
sub3$jDay = as.numeric(sub3$jDay)
sub3$jDay = sub3$jDay - min(sub3$jDay)
sub3$log_dist = log(sub3$dist)
sub3$fADAUID = factor(sub3$ADAUID)
sub3$fHRUID = factor(sub3$HR_orig)
library(glmmTMB)
#compute day of week
dow = data.frame(jDay=unique(sub3$jDay))
dow$DoW = factor(rep(c('Wd','Wd','Wd','Wd','Wd','We','We'),length=nrow(dow)))
sub3 = left_join(sub3,dow)
#Try jDay as a factor use 198 as a reference.
m1 = glmmTMB(ofpc ~ jDay*period + DoW + (1|fADAUID),
data=sub3)
m2 = glmmTMB(ofpc ~ jDay*period + DoW + dist + (1|fADAUID),
data=sub3)
m3 = glmmTMB(ofpc ~ jDay*period + DoW + dist + ED + EC + RI + (1|fADAUID),
data=sub3)
m4 = glmmTMB(ofpc ~ jDay*period + dist*period + DoW + (1|fADAUID),data=sub3)
summary(m4)
#REad in the regional flow data for July
library(dplyr)
fl1 = read.csv('D:/Covid_19/Data/LockdownFlows_July.csv',stringsAsFactors=F)
fl2 = read.csv('D:/Covid_19/Data/LockdownFlows_June.csv',stringsAsFactors=F)
fl = rbind(fl1,fl2)
fl$date = as.Date(fl$date)
fl$jDay = strftime(fl$date,format = "%j",origin="2019-12-31")
#Load in the stats to get the number of people in each region
mob = read.csv('D:/COVID_19/Data/ADA_Mobility_2020_01_11.csv')
mob = subset(mob,jDay == 199)
mob = mob[,c('ADAUID','n_home')]
fl = left_join(fl,mob, by=c('ADAUID' = 'ADAUID'))
fl = subset(fl,!is.na(n_home))
fl$ofpc = fl$outflow/fl$n_home
#compute the mobility flow ratio
fl$f_rat = NA
fl$f_rat_pc = NA
tcrit = 199
trange = 192:205
for (ada in unique(fl$ADAUID)){
for (t in trange){
i = which(fl$ADAUID == ada & fl$jDay == t)
if (t < tcrit){
i7 = which(fl$ADAUID == ada & fl$jDay == t-7)
} else {
i7 = which(fl$ADAUID == ada & fl$jDay == t-14)
}
if (length(i) < 1) next
if (length(i7) < 1) next
fl$f_rat[i] = (fl$outflow[i] - fl$outflow[i7])/(fl$outflow[i]+fl$outflow[i7])
fl$f_rat_pc[i] = (fl$ofpc[i] - fl$ofpc[i7])/(fl$ofpc[i]+fl$ofpc[i7])
}
}
sub2 = subset(fl,!is.na(f_rat))
boxplot(f_rat~jDay,data=sub2)
boxplot(f_rat_pc~jDay,data=sub2)
hist(sub2$ofpc)
boxplot(ofpc~jDay,data=sub2)
# Script to Generate boundary file for Stage2-Stage3 analysis
library(sf)
ada_poly = st_read('D:/Data/Canada/Census/ada_ontario_with_HR.shp')
# List of HRs held back from Stage 3 on July 17
ids = c(3530,3534,3536,3537,3542,3546,3553,3595,3568,3570)
hr_poly2 = ada_poly[ada_poly$HRUID %in% ids,]
# Dissolve those HRs to single poly
hr_poly3 = hr_poly2 %>%
group_by() %>%
summarise()
#Convert to Lines
hr_mls = st_cast(hr_poly3,'MULTILINESTRING')
#Dissolve province to erase boundary
prov_bord = ada_poly %>%
group_by() %>%
summarise()
prov_buff = st_buffer(prov_bord,-100)
s2_bord = st_intersection(hr_mls,prov_buff)
#Load ADA polygon
ada_cent = st_centroid(ada_poly)
#compute distance from every ada poly to boundary (in km)
ada_cent$dist = as.numeric(st_distance(ada_cent,s2_bord,by_element=TRUE)/1000)
#link distance variable
sub2 = left_join(sub2,ada_cent[,c('jADAUID','dist')],by=c('ADAUID' = 'jADAUID'))
#link socio-economic indicators
da_poly = st_read('D:/data/Canada/census/lda_000a16a_e.shp')
da = st_drop_geometry(da_poly)
da$DAUID = as.numeric(da$DAUID)
imd = read.csv('D:/COVID_19/Data/on_scores_quintiles-eng/on_scores_quintiles_EN.csv')
imd = left_join(imd,da[,c('DAUID','ADAUID')],by=c('PRCDDA'='DAUID'))
imd = imd %>%
group_by(ADAUID) %>%
summarise(
pop = sum(Dissemination.area..DA..Population),
RI = weighted.mean(Residential.instability.Scores,Dissemination.area..DA..Population),
ED = weighted.mean(Economic.dependency.Scores,Dissemination.area..DA..Population),
EC = weighted.mean(Ethno.cultural.composition.Scores,Dissemination.area..DA..Population),
SV = weighted.mean(Situational.vulnerability.Scores,Dissemination.area..DA..Population)
)
imd$ADAUID = as.numeric(imd$ADAUID)
sub2 = left_join(sub2,imd)
x = subset(sub2,jDay == 199)
plot(x$ED, x$f_rat)
plot(x$RI, x$f_rat)
plot(x$EC, x$f_rat)
plot(x$SV, x$f_rat)
plot(sub2$dist,sub2$ofpc)
##GLMM analysis
sub2$period = 0
sub2$period[which(sub2$jDay > 198)] = 1
sub3 = subset(sub2, !is.na(RI) )
sub3 = subset(sub3, !is.infinite(f_rat))
sub3$jDay = as.numeric(sub3$jDay)
sub3$jDay = sub3$jDay - min(sub3$jDay)
sub3$sq_dist = sqrt(sub3$dist)
sub3$fADAUID = factor(sub3$ADAUID)
sub3$fHRUID = factor(sub3$HR_orig)
#compute day of week
dow = data.frame(jDay=unique(sub3$jDay))
#Starts on a Friday
dow$DoW = factor(rep(c('Wd','We','We','Wd','Wd','Wd','Wd'),length=nrow(dow)))
sub3 = left_join(sub3,dow)
library(glmmTMB)
#Try jDay as a factor use 198 as a reference.
m1 = glmmTMB(ofpc ~ jDay*period + DoW + (1|fADAUID),
data=sub3,REML=TRUE)
m2 = glmmTMB(ofpc ~ jDay*period + DoW + dist + (1|fADAUID),
data=sub3,REML=TRUE)
m3 = glmmTMB(ofpc ~ jDay*period + DoW + dist + ED + EC + RI + (1|fADAUID),
data=sub3,REML=TRUE)
m4 = glmmTMB(ofpc ~ jDay*period + dist*period + DoW + (1|fADAUID),data=sub3)
#m4 = glmmTMB(f23_rat ~ jDay*period + dist + ED + EC + RI + fHRUID*period + (1|ADAUID),data=sub3)
summary(m1)
summary(m2)
summary(m3)
summary(m4)
m5 = glmmTMB(ofpc ~ jDay*period + ED*period + DoW + (1|fADAUID),data=sub3)
summary(m5)
m5 = glmmTMB(ofpc ~ jDay + period + ED*period + DoW + (1|fADAUID),data=sub3)
summary(m5)
m5 = glmmTMB(ofpc ~ jDay*period + ED*period + DoW + (1|fADAUID),data=sub3)
summary(m5)
m6 = glmmTMB(ofpc ~ jDay*period + EC*period + DoW + (1|fADAUID),data=sub3)
summary(m6)
m8 = glmmTMB(ofpc ~ jDay*period + dist*period + ED*period + EC*period +
RI*period + DoW + (1|fADAUID),data=sub3)
summary(m8)
s8=data.frame(summary(m8)$coefficients$cond)
s8 = s8[c(1:3,nrow(s8),4:(nrow(s8)-1)),]
row.names(s8) = 1:nrow(s8)
s8
m
s8=data.frame(summary(m8)$coefficients$cond)
s8
write.csv(s8,'D:/Covid_19/GLMM_July2020_FullModel.csv')
#REad in the regional flow data for November
library(dplyr)
fl = read.csv('D:/Covid_19/Data/LockdownFlows_TorPeelNov.csv',stringsAsFactors=F)
fl$date = as.Date(fl$date)
fl$jDay = strftime(fl$date,format = "%j",origin="2019-12-31")
#Load in the stats to get the number of people in each region
mob = read.csv('D:/COVID_19/Data/ADA_Mobility_2020_01_11.csv')
mob = subset(mob,jDay == 315)
mob = mob[,c('ADAUID','n_home')]
fl = left_join(fl,mob, by=c('ADAUID' = 'ADAUID'))
fl = subset(fl,!is.na(n_home))
fl$ofpc = fl$outflow/fl$n_home
#compute the mobility flow ratio
fl$f_rat = NA
fl$f_rat_pc = NA
tcrit = 328
trange =  321:334
for (ada in unique(fl$ADAUID)){
for (t in trange){
i = which(fl$ADAUID == ada & fl$jDay == t)
if (t < tcrit){
i7 = which(fl$ADAUID == ada & fl$jDay == t-7)
} else {
i7 = which(fl$ADAUID == ada & fl$jDay == t-14)
}
if (length(i) < 1) next
if (length(i7) < 1) next
fl$f_rat[i] = (fl$outflow[i] - fl$outflow[i7])/(fl$outflow[i]+fl$outflow[i7])
fl$f_rat_pc[i] = (fl$ofpc[i] - fl$ofpc[i7])/(fl$ofpc[i]+fl$ofpc[i7])
}
}
sub2 = subset(fl,!is.na(f_rat))
boxplot(f_rat~jDay,data=sub2)
boxplot(f_rat_pc~jDay,data=sub2)
boxplot(log(ofpc)~jDay,data=sub2)
hist(sub2$ofpc)
boxplot(ofpc~jDay,data=sub2)
# Script to Generate boundary file for Stage2-Stage3 analysis
library(sf)
ada_poly = st_read('D:/Data/Canada/Census/ada_ontario_with_HR.shp')
# Toronto Peel Lockdown only
ids = c(3595,3553)
hr_poly2 = ada_poly[ada_poly$HRUID %in% ids,]
# Dissolve those HRs to single poly
hr_poly3 = hr_poly2 %>%
group_by() %>%
summarise()
#Convert to Lines
hr_mls = st_cast(hr_poly3,'MULTILINESTRING')
#Dissolve province to erase boundary
prov_bord = ada_poly %>%
group_by() %>%
summarise()
prov_buff = st_buffer(prov_bord,-100)
s2_bord = st_intersection(hr_mls,prov_buff)
#Load ADA polygons
ada_cent = st_centroid(ada_poly)
#compute distance from every ada poly to boundary (in km)
ada_cent$dist = as.numeric(st_distance(ada_cent,s2_bord,by_element=TRUE)/1000)
#link distance variable
sub2 = left_join(sub2,ada_cent[,c('jADAUID','dist')],by=c('ADAUID' = 'jADAUID'))
ada_poly2 = left_join(ada_poly,st_drop_geometry(ada_cent[,c('jADAUID','dist')]))
#link socio-economic indicators
da_poly = st_read('D:/data/Canada/census/lda_000a16a_e.shp')
da = st_drop_geometry(da_poly)
da$DAUID = as.numeric(da$DAUID)
imd = read.csv('D:/COVID_19/Data/on_scores_quintiles-eng/on_scores_quintiles_EN.csv')
imd = left_join(imd,da[,c('DAUID','ADAUID')],by=c('PRCDDA'='DAUID'))
imd = imd %>%
group_by(ADAUID) %>%
summarise(
pop = sum(Dissemination.area..DA..Population),
RI = weighted.mean(Residential.instability.Scores,Dissemination.area..DA..Population),
ED = weighted.mean(Economic.dependency.Scores,Dissemination.area..DA..Population),
EC = weighted.mean(Ethno.cultural.composition.Scores,Dissemination.area..DA..Population),
SV = weighted.mean(Situational.vulnerability.Scores,Dissemination.area..DA..Population)
)
imd$ADAUID = as.numeric(imd$ADAUID)
sub2 = left_join(sub2,imd)
x = subset(sub2,jDay == 328)
plot(x$ED, x$f_rat_pc)
plot(x$RI, x$f_rat)
plot(x$EC, x$f_rat)
plot(x$SV, x$f_rat)
plot(sub2$dist,sub2$ofpc)
#ada_poly3 = left_join(ada_poly2,x,by=c('jADAUID.x' = 'ADAUID'))
#plot(ada_poly3['ofpc'])
##GLMM analysis
sub2$period = 0
sub2$period[which(sub2$jDay > 327)] = 1
sub3 = subset(sub2, !is.na(RI) )
sub3 = subset(sub3, !is.infinite(f_rat))
sub3$jDay = as.numeric(sub3$jDay)
sub3$jDay = sub3$jDay - min(sub3$jDay)
sub3$log_dist = log(sub3$dist)
sub3$fADAUID = factor(sub3$ADAUID)
sub3$fHRUID = factor(sub3$HR_orig)
library(glmmTMB)
#compute day of week
dow = data.frame(jDay=unique(sub3$jDay))
dow$DoW = factor(rep(c('Wd','Wd','Wd','Wd','Wd','We','We'),length=nrow(dow)))
sub3 = left_join(sub3,dow)
#Try jDay as a factor use 198 as a reference.
m1 = glmmTMB(ofpc ~ jDay*period + DoW + (1|fADAUID),
data=sub3)
m2 = glmmTMB(ofpc ~ jDay*period + DoW + dist + (1|fADAUID),
data=sub3)
m3 = glmmTMB(ofpc ~ jDay*period + DoW + dist + ED + EC + RI + (1|fADAUID),
data=sub3)
#m4 = glmmTMB(ofpc ~ jDay*period + dist*period + DoW + (1|fADAUID),data=sub3)
#m5 = glmmTMB(ofpc ~ jDay*period + ED*period + DoW + (1|fADAUID),data=sub3)
#m6 = glmmTMB(ofpc ~ jDay*period + EC*period + DoW + (1|fADAUID),data=sub3)
#m7 = glmmTMB(ofpc ~ jDay*period + RI*period + DoW + (1|fADAUID),data=sub3)
m8 = glmmTMB(ofpc ~ jDay*period + dist*period + ED*period + EC*period +
RI*period + DoW + (1|fADAUID),data=sub3)
#summary(m4)
#summary(m5)
#summary(m6)
#summary(m7)
summary(m8)
s8=data.frame(summary(m8)$coefficients$cond)
s8 = s8[c(1:3,nrow(s8),4:(nrow(s8)-1)),]
row.names(s8) = 1:nrow(s8)
write.csv(s8,'D:/Covid_19/GLMM_Nov2020_FullModel.csv')
summary(m8)
s8=data.frame(summary(m8)$coefficients$cond)
s8
write.csv(s8,'D:/Covid_19/GLMM_Nov2020_FullModel.csv')
write.csv(s8,'D:/Covid_19/R/GLMM_Nov2020_FullModel.csv')
s8=data.frame(summary(m8)$coefficients$cond)
write.csv(s8,'D:/Covid_19/R/GLMM_Nov2020_FullModel.csv')
summary(m1)
?interaction.plot
setwd('D:/RPackages/wildlifeDI/wildlifeDI/')
#Submission to CRAN
devtools::release()
