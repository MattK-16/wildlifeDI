row.names(mat_cnt) <- substr(row.names(mat_cnt),5,6)
colnames(mat_cnt) <- substr(colnames(mat_cnt),5,6)
gr <- graph_from_adjacency_matrix(mat_cnt,mode='undirected',weighted=TRUE)
gg1 = ggnet(gr,
mode = "hall",
label = TRUE,
alpha = 1,
color = "white",
segment.color = "black",
segment.size = log(E(gr)$weight))
tbl <- tableGrob(mat_cnt, theme=ttheme_minimal())
png('D:/Mobility/Noble_Deer/HuntDeer/Results/Figure4.png',height=4,width=7.5,units='in',res=300)
grid.arrange(tbl,gg1,nrow=1)
dev.off()
gg1 = ggnet(gr,
mode = "geodist",
label = TRUE,
alpha = 1,
color = "white",
segment.color = "black",
segment.size = log(E(gr)$weight))
tbl <- tableGrob(mat_cnt, theme=ttheme_minimal())
png('D:/Mobility/Noble_Deer/HuntDeer/Results/Figure4.png',height=4,width=7.5,units='in',res=300)
grid.arrange(tbl,gg1,nrow=1)
dev.off()
gg1 = ggnet(gr,
mode = "adj",
label = TRUE,
alpha = 1,
color = "white",
segment.color = "black",
segment.size = log(E(gr)$weight))
tbl <- tableGrob(mat_cnt, theme=ttheme_minimal())
png('D:/Mobility/Noble_Deer/HuntDeer/Results/Figure4.png',height=4,width=7.5,units='in',res=300)
grid.arrange(tbl,gg1,nrow=1)
dev.off()
gg1 = ggnet(gr,
mode = "kamadakawai",
label = TRUE,
alpha = 1,
color = "white",
segment.color = "black",
segment.size = log(E(gr)$weight))
tbl <- tableGrob(mat_cnt, theme=ttheme_minimal())
png('D:/Mobility/Noble_Deer/HuntDeer/Results/Figure4.png',height=4,width=7.5,units='in',res=300)
grid.arrange(tbl,gg1,nrow=1)
dev.off()
gr <- graph_from_adjacency_matrix(mat_cnt,mode='undirected',weighted=TRUE)
gg1 = ggnet(gr,
mode = "fruchtermanreingold",
label = TRUE,
alpha = 1,
color = "white",
segment.color = "black",
segment.size = log(E(gr)$weight))
tbl <- tableGrob(mat_cnt, theme=ttheme_minimal())
png('D:/Mobility/Noble_Deer/HuntDeer/Results/Figure4.png',height=4,width=7.5,units='in',res=300)
grid.arrange(tbl,gg1,nrow=1)
dev.off()
gr <- graph_from_adjacency_matrix(mat_cnt,mode='undirected',weighted=TRUE)
gg1 = ggnet(gr,
mode = "fruchtermanreingold",
label = TRUE,
alpha = 1,
color = "white",
segment.color = "black",
segment.size = log(E(gr)$weight))
tbl <- tableGrob(mat_cnt, theme=ttheme_minimal())
png('D:/Mobility/Noble_Deer/HuntDeer/Results/Figure4.png',height=4,width=7.5,units='in',res=300)
grid.arrange(tbl,gg1,nrow=1)
dev.off()
head(ld(doecons))
#Use ConContext Analysis
doe_rand <- conContext(doecons,var=c('pForest','dRoads','dist'),nrand=250)
head(doe_rand)
summary(doe_rand)
doephas <- conPhase(doecons, pc=60*60)
#Use ConContext Analysis
doe_rand <- conContext(doecons,var=c('pForest','dRoads','dist'),nrand=250)
#Use ConContext Analysis
doe_rand <- conContext(doephas,var=c('pForest','dRoads','dist'),nrand=250)
dim(doe_rand)
head(doe_rand)
boxplot(pForest ~ dt_lev,data=doe_rand)
boxplot(dRoads ~ dt_lev, data=doe_rand)
boxplot(log(dRoads) ~ dt_lev, data=doe_rand)
boxplot(dRoads ~ dt_lev, data=doe_rand)
boxplot(dist ~ dt_lev, data=doe_rand)
levels(doe_rand$dt_lev)
devtools::load_all('D:/RPackages/wildlifeDI/wildlifeDI/R/')
head(doe_rand)
library(lme4)
m1 = lmer(pForest ~ dt_lev + (1|ID) + (1|phaid), data = doe_rand)
summary(doe_rand)
m1 = lmer(pForest ~ dt_lev + (1|ID), data = doe_rand)
summary(m1)
m1 = glmer(pForest ~ dt_lev + (1|ID), data = doe_rand)
summary(doe_rand)
library(glmer)
library('glmmTMB')
library(glmmTMB)
m1 = glmmTMB(pForest ~ dt_lev + (1|ID), data = doe_rand)
summary(m1)
m2 = glmmTMB(dist ~ dt_lev + (1|ID), data = doe_rand)
summary(m2)
#Use ConContext for randomization Analysis
doe_rand <- conContext(doephas,var=c('pForest','dist'),nrand=1000)
boxplot(pForest ~ dt_lev,data=doe_rand)
boxplot(dist ~ dt_lev, data=doe_rand)
#Use ConContext for randomization Analysis
doe_rand <- conContext(doephas,var=c('pForest','dist'),nrand=1000)
boxplot(pForest ~ dt_lev,data=doe_rand)
# ---- roxygen documentation ----
#
#' @title Examine context associated with contact phases
#'
#' @description
#' Extracts the variables associated with \code{var} before, during, and after contact phases, based on some specified time-lag.
#'
#' @details
#' This function is used following the \code{conphase} function. One should choose how to define the contact point (i.e., the parameter \code{contact}) depending on the research question. In most typical cases (with regular interval tracking data) the lag time should be set to the tracking interval and the gap should be set to 1/2 the tracking interval.
#' @param ltraj an object of the class \code{ltraj} which should be output from the function \code{conPhase}.
#' @param var name(s) (as character) of columns (possibly from \code{infolocs}) to keep for contextual analysis.
#' @param def how to define the point-of-contact. The default is to define it as all fixes in a phase \code{def = 'all'}, alternatively contacts can be defined as a single point along the phase defined as one of: \code{'first','last','minDist','minTime'}, which corresponds to the first fix int he contact phase, the last fix in the contact phase, the fix with the minimum time difference and the fix with the closest contact distance.
#' @param idcol column id associated with IDs of individuals, default is the 'burst'.
#' @param nrand  number of random fixes to be selected (default = 0).
#' @param nlag number of lags to compute in the before and after phases of a contact. If lag = 0 then only contacts are used.
#' @param lag time (in seconds) for defining the lags in before and after periods of a contact.
#' @param gap time (in seconds) for excluding the lags in before and after periods of a contact.
#' @param phaid (optional) id(s) of the contact phase upon which to examine (default is all).
#'
#' @return
#' A dataframe that can be used to examine behaviour/context before, during, and after contact phases.
#'
# @references
#'
#' @keywords contacts
#' @seealso conPhase
#' @examples
#'
#' \dontrun{
#' data(does)
#' doecons <- conProcess(does,tc=15*60,dc=50)
#' doephas <- conPhase(doecons,pc=60*60)
#' cc <- conContext(var='dist',def='first',nlag=3,lag=30*60,gap=15*60)
#' head(cc)
#' }
#'
#' @export
#
# ---- End of roxygen documentation ----
conContext <- function(ltraj,var='dist',def='all',idcol='burst',nrand=0,nlag=0,lag=0,gap=0,phaid){
dfr <- ld(ltraj)
if (missing(phaid)){
phaid <- unique(dfr$contact_pha)
phaid <- phaid[!is.na(phaid)]
}
#Function to extract minTime and minDist from phases.
funPhase <- function(phase, dfr, def){
ind <- which(dfr$contact_pha == phase)
if (def=='first'){
i1 <- ind[which.min(dfr$date[ind])]
} else if (def=='last'){
i1 <- ind[which.max(dfr$date[ind])]
} else if (def=='minTime'){
sub <- dfr[dfr$contact_pha == phase,]
sub$id <- as.character(sub$id)
sub$burst <- as.character(sub$burst)
sub <- dl(sub)
dfpairs <- conPairs(sub)
i1 <- ind[dfpairs$contact_orig_rowid[which.min(dfpairs$contact_dt)]]
} else if (def=='minDist'){
sub <- dfr[dfr$contact_pha == phase,]
sub$id <- as.character(sub$id)
sub$burst <- as.character(sub$burst)
sub <- dl(sub)
dfpairs <- conPairs(sub)
i1 <- ind[dfpairs$contact_orig_rowid[which.min(dfpairs$contact_d)]]
}
return(i1)
}
#Before After analysis
fun.BefAft <- function(phaid,dfr,var,nlag,lag,gap,idcol,def){
#subset data to only get individual associated with contact
df.sub <- subset(dfr,get(idcol) == dfr[which(dfr$contact_pha == phaid),idcol][1])
#get only the phase
ind <- which(df.sub$contact_pha == phaid)
pha <- df.sub[ind,]
#Get start and end times of contact phase depending on how contacts are defined
if (def=='first'){
i1 <- i2 <- ind[which.min(pha$date)]
} else if (def=='last'){
i1 <- i2 <- ind[which.max(pha$date)]
} else if (def=='minTime'){
pha$id <- as.character(pha$id)
pha$burst <- as.character(pha$burst)
pha <- dl(pha)
dfpairs <- conPairs(pha)
i1 <- i2 <- ind[dfpairs$contact_orig_rowid[which.min(dfpairs$contact_dt)]]
} else if (def=='minDist'){
pha$id <- as.character(pha$id)
pha$burst <- as.character(pha$burst)
pha <- dl(pha)
dfpairs <- conPairs(pha)
i1 <- i2 <- ind[dfpairs$contact_orig_rowid[which.min(dfpairs$contact_d)]]
} else {                            #Use phases rather than contact points (default)
i1 <- ind[which.min(pha$date)]    #phase start index
i2 <- ind[which.max(pha$date)]    #phase end index
}
cols <- c('date',var)
#Get contact phase fixes
indpha <- seq(i1,i2)
ccon <- data.frame(df.sub[indpha,cols])
#names(ccon) <- var
ccon$dt_con <- 0
ccon$dt_lev <- 'Con'
outdf <- ccon
#If nlag > 0 do the Before-After Analysis
if (nlag > 0){
for (l in 1:nlag){
l1 <- gap+(l-1)*lag
l2 <- gap+l*lag
#Get before fixes
ct1 <- difftime(df.sub$date[i1],df.sub$date)
ibef <- which(ct1 > l1 & ct1 < l2)
cbef <- data.frame(df.sub[ibef,cols])
cbef$dt_con <- as.numeric(-ct1[ibef])
cbef$dt_lev <- rep(paste('B',l,sep=''),length(ibef))
#Get after fixes
ct2 <- difftime(df.sub$date[i2],df.sub$date)
iaft <- which(ct2 < -l1 & ct2 > -l2)
caft <- data.frame(df.sub[iaft,cols])
caft$dt_con <- as.numeric(-ct2[iaft])
caft$dt_lev <- rep(paste('A',l,sep=''),length(iaft))
#append the rows
outdf <- rbind(outdf,cbef,caft)
}
}
outdf$phaid <- phaid
outdf$ID <- df.sub[1,idcol]
return(outdf)
}
#Get the contacts, and optionally the BefAft Phases
dff <- do.call(rbind, lapply(phaid,fun.BefAft,dfr=dfr,var=var,nlag=nlag,lag=lag,gap=gap,idcol=idcol,def=def))
#Get Random fixes if required
if (nrand > 0){
#Get Random fixes that are not 'contacts'
ind2 <- which(dfr$contacts == 0)
ind2 <- sample(ind2, nrand)
rand <- data.frame(dfr[ind2,c('date',var)])
rand$dt_con <- NA
rand$dt_lev <- 'Rnd'
rand$phaid <- NA
rand$ID <- dfr[ind2,idcol]
dff <- rbind(dff,rand)
}
#Organize factor levels
lev <- NULL
if (nlag > 0){
for (i in nlag:1){
lev <- c(lev,paste('B',i,sep=''))
}
}
lev <- c(lev,'Con')
if (nlag > 0){
for (i in 1:nlag){
lev <- c(lev,paste('A',i,sep=''))
}
}
if (nrand > 0) {lev <- c(lev,'Rnd')}
dff$dt_lev <- factor(dff$dt_lev,levels=lev)
return(dff)
}
#Use ConContext for randomization Analysis
doe_rand <- conContext(doephas,var=c('pForest','dist'),nrand=1000)
boxplot(pForest ~ dt_lev,data=doe_rand)
boxplot(dist ~ dt_lev, data=doe_rand)
#Use ConContext for randomization Analysis
doe_rand <- conContext(doephas,var=c('pForest','dist'),nrand=1000)
g1 = ggplot(doe_rand, aes(x=dt_lev, y=pForest)) +
geom_boxplot() +
labs(x='',y='Forest Cover (%)')
g2 = ggplot(doe_rand, aes(x=dt_lev, y=dist)) +
geom_boxplot() +
labs(x='',y='Step-Length (m)')
grid.arrange(g1,g2)
#Use ConContext for randomization Analysis
doe_rand <- conContext(doephas,var=c('pForest','dist'),nrand=1000)
g1 = ggplot(doe_rand, aes(x=dt_lev, y=pForest)) +
geom_boxplot() +
labs(x='',y='Forest Cover (%)')
g2 = ggplot(doe_rand, aes(x=dt_lev, y=dist)) +
geom_boxplot() +
labs(x='',y='Step-Length (m)')
grid.arrange(g1,g2,nrow=1)
dim(doe_rand)
#==========================
# MockHunt_Figures.R
#==========================
### Contact analysis testing
devtools::load_all('D:/RPackages/wildlifeDI/wildlifeDI/')
#devtools::install_github('jedalong/wildlifeDI')
#library(wildlifeDI)
library(adehabitatLT)
library(ggplot2)
library(cowplot)
library(sf)
library(gridExtra)
library(igraph)
library(intergraph)
library(GGally)
data(does)
#load('D:/RPackages/wildlifeDI/wildlifeDI/data/does.rdata')
doecons <- conProcess(does,dc=50,tc=15*60)
doephas <- conPhase(doecons, pc=60*60)
doepair <- conPairs(doephas)
doetemp <- conTemporal(doephas,units='mins')
doepair$hod <- as.POSIXlt(doepair$date)$hour + as.POSIXlt(doepair$date)$min / 60  #convert POSIX to hours
doetemp$hod <- as.POSIXlt(doetemp$start_time)$hour + as.POSIXlt(doetemp$start_time)$min / 60  #convert POSIX to hours
doepair$dom <- as.POSIXlt(doepair$date)$mday
data(mockhunt)
#load('D:/RPackages/wildlifeDI/mockhunt.rdata')
#head(mockhunt)
#Figure 2
#----------------
png('D:/Mobility/Noble_Deer/HuntDeer/Results/Figure2.png',height=7,width=7,units='in',res=300)
par(mfcol=c(4,1),mar=c(4,4,1,0))
hist(doepair$dom,breaks=0:30, main='',xlab='Day of Month',xlim=c(0,30))            #Figure 2a
mtext('a)',1,line=3,adj=0)
hist(doepair$hod,breaks=0:24, main='',xlab='Hour of Day',xlim=c(0,25))             #Figure 2b
mtext('b)',1,line=3,adj=0)
hist(doetemp$hod,breaks=0:24, main='',xlab='Hour of Day',xlim=c(0,25))             #Figure 2c
mtext('c)',1,line=3,adj=0)
hist(as.numeric(doetemp$duration),main='',xlab='Duration (hrs)')                   #figure 2d
mtext('d)',1,line=3,adj=0)
dev.off()
#----
#Figure 3
#----------------
con_sf <- conSpatial(doephas,type='point')                   # Get points of all contacts
con_sf_first <- conSpatial(doephas,type='point',def='first') # Get points of first fix of phase
con_sf_ln <- conSpatial(doephas,type='line')
sf_pt <- ltraj2sf(does)  # Turn all fixes into sf points
sf_ln <- ltraj2sf(does,type='line')  # Turn all fixes into sf line
png('D:/Mobility/Noble_Deer/HuntDeer/Results/Figure3.png',height=3,width=8,units='in',res=300)
par(mfcol=c(1,3),mar=c(2,1,1,0))
# panel a
plot(st_geometry(sf_pt),col='grey',pch=20,cex=0.5)
plot(st_geometry(con_sf),col='black',pch=20,cex=0.5,add=T)
mtext('a)',1,line=1,adj=0)
box()
# panel b
plot(st_geometry(sf_pt),col='grey',pch=20,cex=0.5)
plot(st_geometry(con_sf),col='black',pch=20,cex=0.5,add=T)
plot(st_geometry(con_sf_first),col='red',pch=20,cex=0.5,add=T)
mtext('b)',1,line=1,adj=0)
box()
# panel c
plot(st_geometry(sf_ln),col='grey')
plot(st_geometry(con_sf_ln),col='red',add=T)
mtext('c)',1,line=1,adj=0)
box()
dev.off()
#----
# FIGURE 4
#--------------------------------------
par(mar=c(5,5,5,5))
mat_cnt <- conMatrix(doecons)
#mat_rat <- conMatrix(doecons,output='rate')
#shorten ID names
row.names(mat_cnt) <- substr(row.names(mat_cnt),5,6)
colnames(mat_cnt) <- substr(colnames(mat_cnt),5,6)
gr <- graph_from_adjacency_matrix(mat_cnt,mode='undirected',weighted=TRUE)
gg1 = ggnet(gr,
mode = "fruchtermanreingold",
label = TRUE,
alpha = 1,
color = "white",
segment.color = "black",
segment.size = log(E(gr)$weight))
tbl <- tableGrob(mat_cnt, theme=ttheme_minimal())
png('D:/Mobility/Noble_Deer/HuntDeer/Results/Figure4.png',height=4,width=7.5,units='in',res=300)
grid.arrange(tbl,gg1,nrow=1)
dev.off()
#FIGURE 5
#Use ConContext for randomization Analysis compare forest and step length
doe_rand <- conContext(doephas,var=c('pForest','dist'),nrand=1000)
g1 = ggplot(doe_rand, aes(x=dt_lev, y=pForest)) +
geom_boxplot() +
labs(x='',y='Forest Cover (%)')
g2 = ggplot(doe_rand, aes(x=dt_lev, y=dist)) +
geom_boxplot() +
labs(x='',y='Step-Length (m)')
png('D:/Mobility/Noble_Deer/HuntDeer/Results/Figure6.png',height=4,width=7.5,units='in',res=300)
plot_grid(g1,g2,labels=c('a)','b)'),nrow=1,label_y=0.15)
dev.off()
#Figure 6
#----------------
png('D:/Mobility/Noble_Deer/HuntDeer/Results/Figure6.png',height=8,width=7.5,units='in',res=300)
p1 <- ggplot(mockhunt, aes(x=dt_lev, y=dist)) +
geom_boxplot() +
coord_cartesian(ylim=c(0,1000)) +
labs(x='Time to contact (min)',y='Step length (m)') +
scale_x_discrete(labels=c(as.character(seq(-96,96,by=8))))
p2 <- ggplot(mockhunt, aes(x=dt_lev, y=displacement)) +
geom_boxplot() +
coord_cartesian(ylim=c(0,2000)) +
labs(x='Time to contact (min)',y='Displacement (m)') +
scale_x_discrete(labels=c(as.character(seq(-96,96,by=8))))
p3 <- ggplot(mockhunt, aes(x=dt_lev, y=Forest_Perc)) +
geom_boxplot() +
labs(x='Time to contact (min)',y='Forest Cover (%)') +
scale_x_discrete(labels=c(as.character(seq(-96,96,by=8))))
plot_grid(p1,p2,p3,labels=c('a)','b)','c)'),nrow=3,label_y=0.15)
dev.off()
#----
png('D:/Mobility/Noble_Deer/HuntDeer/Results/Figure6.png',height=4,width=7.5,units='in',res=300)
plot_grid(g1,g2,labels=c('a)','b)'),nrow=1,label_y=0.15)
dev.off()
png('D:/Mobility/Noble_Deer/HuntDeer/Results/Figure5.png',height=4,width=7.5,units='in',res=300)
plot_grid(g1,g2,labels=c('a)','b)'),nrow=1,label_y=0.15)
dev.off()
png('D:/Mobility/Noble_Deer/HuntDeer/Results/Figure6.png',height=8,width=7.5,units='in',res=300)
p1 <- ggplot(mockhunt, aes(x=dt_lev, y=dist)) +
geom_boxplot() +
coord_cartesian(ylim=c(0,1000)) +
labs(x='Time to contact (min)',y='Step length (m)') +
scale_x_discrete(labels=c(as.character(seq(-96,96,by=8))))
p2 <- ggplot(mockhunt, aes(x=dt_lev, y=displacement)) +
geom_boxplot() +
coord_cartesian(ylim=c(0,2000)) +
labs(x='Time to contact (min)',y='Displacement (m)') +
scale_x_discrete(labels=c(as.character(seq(-96,96,by=8))))
p3 <- ggplot(mockhunt, aes(x=dt_lev, y=Forest_Perc)) +
geom_boxplot() +
labs(x='Time to contact (min)',y='Forest Cover (%)') +
scale_x_discrete(labels=c(as.character(seq(-96,96,by=8))))
plot_grid(p1,p2,p3,labels=c('a)','b)','c)'),nrow=3,label_y=0.15)
dev.off()
head(mockhunt)
levels(mockhunt$dt_lev)
b = levels(mockhunt$dt_lev)[1:12]
a = levels(mockhunt$dt_lev)[14:25]
mockhuntb = subset(mockhunt,dt_lev %in% b)
mockhunta = subset(mockhunt,dt_lev %in% a)
levels(mockhuntb)
levels(mockhuntb$dt_lev)
mockhuntb$dt_lev=factor(mockhuntb$dt_lev)
levels(mockhuntb$dt_lev)
mockhuntb$dt_lev=factor(mockhuntb$dt_lev,levels=12:1)
mockhunta$dt_lev=factor(mockhunta$dt_lev,levels=1:12)
levels(mockhunta)
levels(mockhunta$dt_lev)
left.join(mockhuntb,mockhunta,by=c('phaid'='phaid', 'dt_lev'='dt_lev'))
library(dplyr)
?left_join
mockhuntBA = full_join(mockhuntb,mockhunta,by=c('phaid', 'dt_lev'))
head(mockhuntBA)
mockhuntBA = left_join(mockhuntb,mockhunta,by=c('phaid', 'dt_lev'))
mockhuntBA = mockhuntb %>%
left_join(mockhunta,by=c('phaid', 'dt_lev'))
mockhuntBA = mockhuntb %>%
left_join(mockhunta,by=c('phaid', 'dt_lev'))
head(mockhuntb)
mockhuntb$dt_lev=factor(mockhuntb$dt_lev,levels=rev(1:12))
head(mockhuntb)
head(mockhunta)
mockhuntb = subset(mockhunt,dt_lev %in% b)
mockhunta = subset(mockhunt,dt_lev %in% a)
mockhuntb$dt_lev=factor(mockhuntb$dt_lev,levels=rev(1:12))
mockhunta$dt_lev=factor(mockhunta$dt_lev,levels=1:12)
head(mockhunt(a))
head(mockhunta
)
levels(mockhunta$dt_lev)
summary(mockhunta)
mockhuntb = subset(mockhunt,dt_lev %in% b)
head(mockhunta)
head(mockhuntb)
mockhuntb$dt_lev=factor(mockhuntb$dt_lev)
head(mockhuntb)
levels(mockhuntb$dt_lev)
12:1
mockhuntb$dt_lev=factor(mockhuntb$dt_lev)
mockhunta$dt_lev=factor(mockhunta$dt_lev)
levels(mockhuntb$dt_lev) = 12:1
levels(mockhunta$dt_lev) = 1:12
summary(mockhuntb)
mockhuntBA = mockhuntb %>%
inner_join(mockhunta,by=c('phaid', 'dt_lev'))
levels(mockhunta)
levels(mockhunta$dt_lev)
summary(mockhunta)
mockhuntb = subset(mockhunt,dt_lev %in% b)
mockhunta = subset(mockhunt,dt_lev %in% a)
mockhuntb$dt_lev=factor(mockhuntb$dt_lev)
mockhunta$dt_lev=factor(mockhunta$dt_lev)
levels(mockhuntb$dt_lev) = 12:1
levels(mockhunta$dt_lev) = 1:12
mockhuntBA = mockhuntb %>%
inner_join(mockhunta,by=c('phaid', 'dt_lev'))
citation('GGally')
#Use ConContext for randomization Analysis
doe_rand <- conContext(doephas,var=c('pForest','dist'),nrand=1000)
g1 = ggplot(doe_rand, aes(x=dt_lev, y=pForest)) +
geom_boxplot() +
labs(x='',y='Forest Cover (%)')
g2 = ggplot(doe_rand, aes(x=dt_lev, y=dist)) +
geom_boxplot() +
labs(x='',y='Step-Length (m)')
plot_grid(g1,g2,nrow=1)
?plot_grid
